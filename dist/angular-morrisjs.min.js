!function(e,i,t){"use strict";var r=e.module("angular-morrisjs",[]),a=function(e){return angular.forEach(arguments,function(i){i!==e&&angular.forEach(i,function(i,t){e[t]&&e[t].constructor&&e[t].constructor===Object?a(e[t],i):e[t]=i})}),e};r.factory("Morris",[function(){return{b:i.Bar,l:i.Line,a:i.Area,d:i.Donut}}]),r.service("MorrisOptionsParser",["$parse",function(i){this.parseValues=function(i,r,a){if(e.isDefined(r)||(r=[]),!e.isDefined(i))return t;if(-1!==r.indexOf(i))return i;if(a!==!0){if("true"===i)return!0;if("false"===i)return!1}return t},this.getBasicOptions=function(e,t,r){return{element:e,data:i(t.data)(r),additional:{resize:this.parseValues(t.resize)}}},this.getValuesOptions=function(e,t){return{xkey:e.xkey,ykeys:i(e.ykeys)(t),labels:i(e.labels)(t),hideHover:this.parseValues(e.hideHover,["always","auto"]),asFunctions:{hoverCallback:i(e.hoverCallback)(t)}}},this.getGridOptions=function(e){return{axes:this.parseValues(e.axes),grid:this.parseValues(e.grid),additional:{gridTextColor:e.gridTextColor,gridTextSize:e.gridTextSize,gridTextFamily:e.gridTextFamily,gridTextWeight:e.gridTextWeight}}},this.getLinesOptions=function(e,t){return{lineColors:i(e.lineColors)(t),lineWidth:e.lineWidth,pointSize:e.pointSize,pointFillColors:i(e.pointFillColors)(t),pointStrokeColors:e.pointStrokeColors,ymax:e.ymax,ymin:e.ymin,smooth:this.parseValues(e.smooth),parseTime:this.parseValues(e.parseTime),postUnits:e.postUnits,preUnits:e.preUnits,xLabels:e.xLabels,xLabelAngle:e.xLabelAngle,goals:i(e.goals)(t),events:i(e.events)(t),additional:{fillOpacity:e.fillOpacity,goalStrokeWidth:e.goalStrokeWidth,goalLineColors:e.goalLineColors,eventStrokeWidth:e.eventStrokeWidth,eventLineColors:e.eventLineColors,continuousLine:this.parseValues(e.continuousLine)},asFunctions:{dateFormat:i(e.dateFormat)(t),xLabelFormat:i(e.xLabelFormat)(t)}}},this.parse=function(i){return e.forEach(i.asFunctions,function(t,r){e.isFunction(t)&&(i[r]=t)}),e.forEach(i.additional,function(t,r){e.isDefined(t)&&(i[r]=t)}),i},this.addCallbackForGraph=function(t,r,a){if(e.isDefined(t.setGraph)){var s=i(t.setGraph)(r);e.isFunction(s)&&s(a)}}}]),r.directive("barChart",["$parse","Morris","MorrisOptionsParser",function(e,i,t){return{restrict:"AE",template:"<div></div>",replace:!0,link:function(r,s,n){var o,l={barColors:e(n.barColors)(r),stacked:t.parseValues(n.stacked)};a(l,t.getBasicOptions(s,n,r),t.getValuesOptions(n,r),t.getGridOptions(n)),o=i.b(t.parse(l)),t.addCallbackForGraph(n,r,o)}}}]),r.directive("lineChart",["Morris","MorrisOptionsParser",function(e,i){return{restrict:"AE",template:"<div></div>",replace:!0,link:function(t,r,s){var n,o={};a(o,i.getBasicOptions(r,s,t),i.getValuesOptions(s,t),i.getGridOptions(s),i.getLinesOptions(s,t)),n=e.l(i.parse(o)),i.addCallbackForGraph(s,t,n)}}}]),r.directive("areaChart",["Morris","MorrisOptionsParser",function(e,i){return{restrict:"AE",template:"<div></div>",replace:!0,link:function(t,r,s){var n,o={behaveLikeLine:i.parseValues(s.behaveLikeLine)};a(o,i.getBasicOptions(r,s,t),i.getValuesOptions(s,t),i.getGridOptions(s),i.getLinesOptions(s,t)),n=e.a(i.parse(o)),i.addCallbackForGraph(s,t,n)}}}]),r.directive("donutChart",["$parse","Morris","MorrisOptionsParser",function(e,i,t){return{restrict:"AE",template:"<div></div>",replace:!0,link:function(r,s,n){var o,l={colors:e(n.colors)(r),asFunctions:{formatter:e(n.formatter)(r)}};a(l,t.getBasicOptions(s,n,r)),o=i.d(t.parse(l)),t.addCallbackForGraph(n,r,o)}}}])}(window.angular,window.Morris);